########################################################################################################################
# Repo tool base settings
########################################################################################################################

[repo]
# Use Kit Template repo configuration as a base. Only override things specific to the repo.
import_configs = ["${root}/_repo/deps/repo_kit_tools/kit-template/repo.toml"]

# Repository Name. It is used for solution name and final package name
name = "earth-2-control-center"

########################################################################################################################
# Extensions precacher
########################################################################################################################

[repo_precache_exts]
# Apps to run and precache
apps = [
    # "${root}/source/apps/omni.earth_2_command_center.app_streamer.kit",
    # "${root}/source/apps/omni.earth_2_command_center.app_nvcf.kit",
    "${root}/source/apps/omni.earth_2_command_center.app_desktop.kit",
]

generated_app_path = ""

registries = [
    { name = "kit/default", url = "omniverse://kit-extensions.ov.nvidia.com/exts/kit/default" },
    { name = "kit/sdk", url = "omniverse://kit-extensions.ov.nvidia.com/exts/kit/sdk/${kit_version_short}/${kit_git_hash}" },
]

########################################################################################################################
# Test Runner
########################################################################################################################

[repo_test.suites.alltests]
kind = "glob_and_exec"
path = "${test_root}"

# Run all test
include = [
    "tests-*${shell_ext}",
]
exclude = [
    "tests-omni.earth_2_command_center.app${shell_ext}",
    "tests-omni.earth_2_command_center.app_desktop${shell_ext}",
    "tests-omni.earth_2_command_center.app_nvcf${shell_ext}",
    "tests-omni.earth_2_command_center.app_streamer${shell_ext}",
    "tests-omni.earth_2_command_center.app.example_extension*",
    "tests-hpcvis.datafederation*",
]

########################################################################################################################
# Licensing
########################################################################################################################
[repo_build.licensing]
enabled = false
run_by_default = false
include_kit_extensions = false
write_dedupe_manifests = true

# Do not gather Python dependency licenses
licensing_enabled = false

[repo_build]
# These are necessary to avoid a repo_build failure where the source/apps directory
# is expected to always exist.
fetch."platform:linux-x86_64".before_pull_commands = [
    ["mkdir", "--parents", "${root}/source/apps"],
]

# Mute this command, don't emit to console.
fetch."platform:windows-x86_64".before_pull_commands = [
    ["powershell", "-Command", "New-Item -ItemType Directory -Path ${root}/source/apps -ErrorAction SilentlyContinue", ";", "Write-Host 'Done'"],
]
[repo_build.fetch.pip]
licensing_enabled = false

[repo_build.build]
enabled = false
"platform:windows-x86_64".enabled = false
# AUTOREMOVE: BEGIN
# Enable all compilation in CI
#"token:in_ci==true".enabled = true
# AUTOREMOVE: END

[repo_build.msbuild]
# If set to true will attempt to link to host's Visual Studio and Windows SDK installations.
# This is needed if C++ compilation is needed on Windows, and repo_build.build.enabled is set to true.
link_host_toolchain = false

vs_version = ""
# AUTOREMOVE: BEGIN
# Internally enable host linking in CI
"token:in_ci==true".link_host_toolchain = true
# AUTOREMOVE: END

# Filter on Visual Studio version e.g.: Visual Studio 2022. Empty string will match all years and prioritize the newest.
# AUTOREMOVE: BEGIN
"token:in_ci==true".vs_version = "vs2019"
# AUTOREMOVE: END

# Visual Studio path; This will be used if the user would like to point to a specific VS installation rather than rely on heuristic locating.
# vs_path = "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\"
# AUTOREMOVE: BEGIN
# Internal CI Visual Studio path that sometimes works.
"token:in_ci==true".vs_path = "C:\\vs2019"
# AUTOREMOVE: END

# Filter specifically to "Enterprise", "Professional", or "Community" editions of Visual Studio
# vs_edition = "Community"

# Filter by Visual Studio installations that have installed this version of the MSVC compiler.
# msvc_version = "v142"

# Filter by Visual Studio installations that ship with MSBuild of this major version.
# msbuild_version = "17"

# Windows SDK version
# winsdk_version = "10.0.17763.0"

# Windows SDK path; This will prevent needing to dynamically locate an installation by guesswork.
# winsdk_path = "C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.17763.0"

########################################################################################################################
# Tool to pull kit kernel and extensions before running
########################################################################################################################

[repo_kit_pull_extensions]
precache_exts_enabled = false

########################################################################################################################
# Documentation building
########################################################################################################################

[repo_docs]
# disable until the environment variable is longer than 32767 characters is fixed
enabled = false

# earth-2-control-center doc
[[repo_docs.kit.custom_project]]
name = "earth-2-command-center"
root = "${root}"
config_path = "${root}/docs/docs.toml"

# extension docs
# TODO
[repo_docs.kit]
extensions = [
#    "example.cpp_ext",
#    "example.mixed_ext",
#    "example.python_ext",
]

########################################################################################################################
# Packaging
########################################################################################################################

[repo_package]
[repo_package.packages.main_package]
# By default, the package main package is thin (so external dependencies are not included)
# Use `repo.sh package -m fat_package -c release` to build a fat package which is needed for containerization
# omniverse_flow_version_scheme sets package name to the format:
# archive_name@{build_version}+{gitbranch}.{builder_id}.{githash}.{build_environment}.{host_platform}.{archive_format}
# e.g. kit-app-template@2025.1.0+custom-app-stuff.0.12345678.local.linux-x86_64.zip

root = "_build/$${platform}/$${config}"
archive_name = "${conf:repo.name}"
omniverse_flow_version_scheme=true
package_per_config = true
append_config = true
archive_format = "zip"

exclude_kit_extensions_for_thin_packaging = false
files = [
    ["**"],
]
files_exclude = [
    ["_*/**"],
    [".*/**"],
    ["**/*.pdb"],
    ["**/*.exp"],
    ["kit/**"],
    ["extscache/**"],
    ["extsbuild/**"],
    ["baseapp/**"],
    ["cache/**"],
    ["data/**"],
    ["logs/**"],
    ["apps/kit.portable"],
    ["**/__pycache__"],
]
"linux-x86_64".files_strip = []

[repo_package.packages.fat_package]
# Fat package includes all dependencies, which is needed for containerization / offline deployments
# This is used inside the tools/repoman/package.py script
root = "_build/$${platform}/$${config}"
archive_name = "${conf:repo.name}-fat"
omniverse_flow_version_scheme=true
package_per_config = true                   # By default we only build + package release.
append_config = true                        # Set to true to append release/debug config to package name.
archive_format = "zip"                      # We support "7z", "zip", "tar.gz", "tar.bz2"
#build_version = "${file:${config_root}/tools/VERSION.md}"  # It's ignored when omniverse_flow_version_scheme is true

files = [
    ["**"],
]
files_exclude = [
    ["_*/**"],
    [".*/**"],
    ["**/*.pdb"],
    ["**/*.exp"],
    ["baseapp/**"],
    ["extsbuild/**"],
    ["cache/**"],
    ["data/**"],
    ["logs/**"],
    ["apps/kit.portable"],
    ["**/__pycache__"],
]
"linux-x86_64".files_strip = []


########################################################################################################################
# CI Entry points (scripts)
########################################################################################################################

# Override the default build script to only build release config
[repo_ci.jobs.build]
script = "${root}/tools/ci/build.py"

########################################################################################################################
# Extensions publisher
########################################################################################################################

[repo_publish_exts]

# Extensions to publish, include and exclude among those discovered by kit. Wildcards are supported.
exts.include = [
#    "hpcvis.datafederation",
#    "hpcvis.dynamictexture",
#    "omni.earth_2_command_center.app.*",
]
exts.exclude = []

# verify before publishing
publish_verification = false

# Supported configs and platforms when `-a` cmd is used
configs = ["release"]  # removed debug
