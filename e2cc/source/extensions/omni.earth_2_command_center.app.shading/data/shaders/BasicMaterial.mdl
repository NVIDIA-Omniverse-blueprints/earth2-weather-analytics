/***************************************************************************************************
 * Copyright 2025 NVIDIA Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **************************************************************************************************/

mdl 1.9;

// system imports
import ::df::*;
import ::scene::*;

// local imports
import common::*;

export material BasicMaterial(
        color diffuse_color = color(0.0f),
        uniform string diffuse_color_primvar = "",
        float emission_intensity = 0.0f,
        color emission_color = color(1.0f),
        uniform string emission_color_primvar = ""
    )
  =
  let {
      color final_diffuse_color = (diffuse_color_primvar != "") ?
          scene::data_lookup_color(diffuse_color_primvar, color(diffuse_color)) :
          diffuse_color;
      color final_emission_color = (emission_color_primvar != "") ?
          scene::data_lookup_color(emission_color_primvar, color(emission_color)) :
          emission_color;

    material_surface surface = material_surface(
        scattering: df::diffuse_reflection_bsdf(final_diffuse_color),
        emission: material_emission(
            emission: df::diffuse_edf(),
            intensity: final_emission_color*emission_intensity,
            mode: intensity_radiant_exitance));

  } in material
(
 surface: surface,
 backface: surface,
 ior: color(1.0f),
 thin_walled: true
);

