/***************************************************************************************************
 * Copyright 2025 NVIDIA Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **************************************************************************************************/

mdl 1.9;

// system imports
import ::anno::*;
import ::math::*;
import ::tex::*;

// local imports
import common::*;

export color lut_lookup(
    float lookup = 0.5f,
    // assumed to be strictly monotonically increasing
    uniform float[<n>] xpoints = float[](0.0f, 0.5, 1.0f),
    uniform color[n] xcolors = color[](color(1,0,0), color(0,1,0), color(0,0,1))
    )
{
  color result = color(0);
  if (n <= 1)
    return result;

  // could do bisection search for the 'active' segment as LUT arrays can be
  // large
  for (int i=0; i<n-1; ++i) {
    float cur_pos = math::clamp((lookup-xpoints[i])/(xpoints[i+1]-xpoints[i]), 0.0f, 1.0f);
    result = result + math::lerp(xcolors[i], xcolors[i+1], cur_pos) * (lookup >= xpoints[i] && lookup < xpoints[i+1]);
  }

  return result;
}

export color lut_lookup(
    float lookup = 0.5f,
    uniform texture_2d lut = texture_2d()
    )
{
    // if the lut is empty, we do no color transfer
    if (!tex::texture_isvalid(lut)) {
        return color(lookup);
    }

    // we distinguish between pixel centers and lookup remapping here.
    // so we need to remap the lookup range in such a way that 0 maps to the
    // leftmost pixel _center_, and 1 maps to the rightmost pixel _center_
    // mostly matters for low-resolution LUTs but might as well do things right
    uniform int width = tex::width(lut);
    uniform float dw = 1.0f/width;
    float lookup_pos = (math::clamp(lookup, 0.0f, 1.0f)+0.5f*dw) / (1.0f - dw);
    return tex::lookup_color(lut, float2(lookup_pos, 0.0f), tex::wrap_clamp, tex::wrap_clamp);
}

